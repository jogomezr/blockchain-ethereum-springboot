/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.blockchain.ethereum.api;

import com.example.blockchain.ethereum.domain.InitiativeTO;
import com.example.blockchain.ethereum.domain.NewInitiativeTO;
import com.example.blockchain.ethereum.domain.ProposalTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-11-11T19:34:33.503177800+01:00[Europe/Paris]")

@Validated
@Api(value = "initiatives", description = "the initiatives API")
public interface InitiativesApi {

    /**
     * POST /initiatives : Create an initiative
     *
     * @param newInitiativeTO New initiative object (required)
     * @return successful operation (status code 201)
     *         or Invalid data (status code 400)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Create an initiative", nickname = "createInitiative", notes = "", response = NewInitiativeTO.class, tags={ "initiatives", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation", response = NewInitiativeTO.class),
        @ApiResponse(code = 400, message = "Invalid data"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/initiatives",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<NewInitiativeTO> _createInitiative(@ApiParam(value = "New initiative object" ,required=true )  @Valid @RequestBody NewInitiativeTO newInitiativeTO);


    /**
     * DELETE /initiatives/{initiativeId} : Deletes the requested initiative
     *
     * @param initiativeId ID of initiative to return (required)
     * @return successful operation (status code 200)
     *         or Invalid initiative ID (status code 400)
     *         or Initiative not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Deletes the requested initiative", nickname = "deleteInitiativeById", notes = "", tags={ "initiatives", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid initiative ID"),
        @ApiResponse(code = 404, message = "Initiative not found"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/initiatives/{initiativeId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> _deleteInitiativeById(@ApiParam(value = "ID of initiative to return",required=true) @PathVariable("initiativeId") Long initiativeId);


    /**
     * GET /initiatives : Returns a list of available initiatives
     *
     * @return successful operation (status code 200)
     *         or No content (status code 204)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Returns a list of available initiatives", nickname = "getAllInitiatives", notes = "", response = InitiativeTO.class, responseContainer = "List", tags={ "initiatives", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InitiativeTO.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "No content"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/initiatives",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<InitiativeTO>> _getAllInitiatives();


    /**
     * GET /initiatives/{initiativeId} : Returns the details of the requested initiative
     *
     * @param initiativeId ID of initiative to return (required)
     * @return successful operation (status code 200)
     *         or Invalid initiative ID (status code 400)
     *         or Initiative not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Returns the details of the requested initiative", nickname = "getInitiativeById", notes = "", response = InitiativeTO.class, tags={ "initiatives", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InitiativeTO.class),
        @ApiResponse(code = 400, message = "Invalid initiative ID"),
        @ApiResponse(code = 404, message = "Initiative not found"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/initiatives/{initiativeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InitiativeTO> _getInitiativeById(@ApiParam(value = "ID of initiative to return",required=true) @PathVariable("initiativeId") Long initiativeId);


    /**
     * GET /initiatives/{initiativeId}/winningProposal : Returns the details of the winning proposal of the supplied initiative
     *
     * @param initiativeId ID of initiative to access (required)
     * @return successful operation (status code 200)
     *         or Invalid initiative ID (status code 400)
     *         or Initiative not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Returns the details of the winning proposal of the supplied initiative", nickname = "getWinningProposal", notes = "", response = ProposalTO.class, tags={ "initiatives", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ProposalTO.class),
        @ApiResponse(code = 400, message = "Invalid initiative ID"),
        @ApiResponse(code = 404, message = "Initiative not found"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/initiatives/{initiativeId}/winningProposal",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProposalTO> _getWinningProposal(@ApiParam(value = "ID of initiative to access",required=true) @PathVariable("initiativeId") Long initiativeId);

}
