openapi: 3.0.1
info:
  title: Ethereum DApp Example API
  description: This is a sample contract to manage users, initiatives and proposals against an ethereum smart contract.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
- name: users
  description: Everything about your Users
- name: initiatives
  description: Access to initiatives
paths:
  /users:
    get:
      tags:
      - users
      summary: Returns a list of available users
      operationId: getAllUsers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTO'
        204:
          description: No content
          content: {}
        500:
          description: Internal server error
          content: {}

  /users/{userId}:
    get:
      tags:
      - users
      summary: Returns the details of the requested user
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        description: ID of user to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTO'
        400:
          description: Invalid user ID
          content: {}
        404:
          description: User not found
          content: {}
        500:
          description: Internal server error
          content: {}

  /users/login:
    post:
      tags:
      - users
      summary: Create an initiative
      operationId: loginUser
      requestBody:
        description: User's credentials object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestTO'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTO'
        400:
          description: Invalid credentials
          content: {}
        500:
          description: Internal server error
          content: {}

  /initiatives:
    get:
      tags:
      - initiatives
      summary: Returns a list of available initiatives
      operationId: getAllInitiatives
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InitiativeTO'
        204:
          description: No content
          content: {}
        500:
          description: Internal server error
          content: {}
    post:
      tags:
      - initiatives
      summary: Create an initiative
      operationId: createInitiative
      requestBody:
        description: New initiative object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewInitiativeTO'
        required: true
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewInitiativeTO'
        400:
          description: Invalid data
          content: {}
        500:
          description: Internal server error
          content: {}
  
  /initiatives/{initiativeId}:
    get:
      tags:
      - initiatives
      summary: Returns the details of the requested initiative
      operationId: getInitiativeById
      parameters:
      - name: initiativeId
        in: path
        description: ID of initiative to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiativeTO'
        400:
          description: Invalid initiative ID
          content: {}
        404:
          description: Initiative not found
          content: {}
        500:
          description: Internal server error
          content: {}
    delete:
      tags:
      - initiatives
      summary: Deletes the requested initiative
      operationId: deleteInitiativeById
      parameters:
      - name: initiativeId
        in: path
        description: ID of initiative to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid initiative ID
          content: {}
        404:
          description: Initiative not found
          content: {}
        500:
          description: Internal server error
          content: {}

  /initiatives/{initiativeId}/winningProposal:
    get:
      tags:
      - initiatives
      summary: Returns the details of the winning proposal of the supplied initiative
      operationId: getWinningProposal
      parameters:
      - name: initiativeId
        in: path
        description: ID of initiative to access
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalTO'
        400:
          description: Invalid initiative ID
          content: {}
        404:
          description: Initiative not found
          content: {}
        500:
          description: Internal server error
          content: {}

components:
  schemas:
    UserTO:
      type: object
      required:
      - id
      - username
      - name
      - account
      - avatar
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
        account:
          type: string
        avatar:
          type: string

    LoginRequestTO:
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
          description: The user name for login
        password:
          type: string
          description: The password for login in clear text

    NewInitiativeTO:
      type: object
      required:
      - name
      - description
      - creationDate
      - startDate
      - endDate
      - proposals
      properties:
        name:
          type: string
        description:
          type: string
        creationDate:
          type: string
          format: date-time
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        proposals:
          type: array
          items:
            $ref: '#/components/schemas/NewProposalTO'

    InitiativeTO:
      type: object
      required:
      - id
      - name
      - description
      - creationDate
      - startDate
      - endDate
      - status
      - numProposals
      - proposals
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        creationDate:
          type: string
          format: date-time
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
          - active
          - pending
          - finished
        numProposals:
          type: integer
          format: int64
        proposals:
          type: array
          items:
            $ref: '#/components/schemas/ProposalTO'

    NewProposalTO:
      type: object
      required:
      - name
      - image
      properties:
        name:
          type: string
        image:
          type: string

    ProposalTO:
      type: object
      required:
      - id
      - name
      - image
      - votes
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        image:
          type: string
        votes:
          type: integer
          format: int64